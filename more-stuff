#!/bin/bash

# Directory containing the split files
directory="/path/to/your/folder"

# Iterate over each gzipped part file in the directory
for gz_part in "$directory"/*.gz.part-*; do
    # Extract the base file name without the part suffix
    base_name=$(basename "$gz_part" | sed 's/\.gz\.part-.*$//')

    # Combine the split parts into a single gz file
    cat "$directory/$base_name".gz.part-* > "$directory/$base_name".gz

    # Unarchive the combined gz file
    gunzip "$directory/$base_name".gz
done

echo "All files have been combined and unarchived."




#!/bin/bash

# Directory containing the files
directory="/path/to/your/folder"

# Output file for checksums
output_file="checksums.txt"

# Empty the output file if it exists
> "$output_file"

# Calculate checksums and print to the output file
for file in "$directory"/*; do
    if [ -f "$file" ]; then
        sha256sum "$file" >> "$output_file"
    fi
done

echo "Checksums have been written to $output_file"




unset_env_vars() {
    for var in $(env | grep -E '^TF_|^VAULT_|^AWS_' | awk -F= '{print $1}'); do
        unset $var
    done
}

# Call the function
unset_env_vars



#!/bin/bash

compare_versions() {
    # Strip the 'v' prefix
    local version1=${1#v}
    local version2=${2#v}

    if [[ "$version1" == "$version2" ]]; then
        echo "Versions are equal"
        return 0
    fi

    # Use sort -V to compare versions
    highest_version=$(echo -e "$version1\n$version2" | sort -V | tail -n 1)

    if [[ "$highest_version" == "$version1" ]]; then
        echo "$1 is higher"
    else
        echo "$2 is higher"
    fi
}

# Example usage
version1="v1.2.3"
version2="v1.3.0"
compare_versions $version1 $version2







copy_token_to_users() {
  for user_home in /home/*; do
    if [ -d "$user_home" ]; then
      user=$(stat -c '%U' "$user_home")
      group=$(stat -c '%G' "$user_home")
      cp /root/.vault-token "$user_home/.vault-token"
      chown "$user:$group" "$user_home/.vault-token"
      chmod 600 "$user_home/.vault-token"
    fi
  done
}

#!/bin/bash

# Function to update JSON property
update_json_property() {
  local json_file=$1
  local property=$2
  local new_value=$3

  jq --arg property "$property" --arg new_value "$new_value" '.[$property] = $new_value' "$json_file" > tmp.$$.json && mv tmp.$$.json "$json_file"
}

# Usage example
json_file="example.json"
update_json_property "$json_file" "name" "New Name"
update_json_property "$json_file" "age" "30"


#!/bin/bash

# Variable name to check
VAR_NAME="MY_VARIABLE"

# Check if the variable is set and has a value
if [ -z ${!VAR_NAME+x} ]; then
    echo "$VAR_NAME is not set"
else
    echo "$VAR_NAME is set with value: ${!VAR_NAME}"
fi

