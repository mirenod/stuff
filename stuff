#!/bin/bash

generate_pipeline() {
    # Initialize an array to keep track of parameter keys
    PARAM_KEYS=()

    # Iterate over the arguments
    for param in "$@"; do
        # Check if the parameter contains '='
        if [[ "$param" == *"="* ]]; then
            key="${param%%=*}"
            value="${param#*=}"

            # Remove surrounding quotes from the value if they exist
            value="${value%\"}"
            value="${value#\"}"
            value="${value%\'}"
            value="${value#\'}"

            # Declare the variable dynamically
            declare "${key}=${value}"

            # Add the key to the array
            PARAM_KEYS+=("${key}")
        fi
    done

    # Handle the conditional test job if 'test' variable is set
    if [ "${test}" = "true" ]; then
        TEST_JOB=$(cat <<'EOM'
test_job:
  stage: test
  script:
    - echo "Running tests in ${ENVIRONMENT} environment..."
  tags: ${RUNNER_TAGS}
EOM
)
    else
        TEST_JOB=""
    fi

    # Initialize variable for Terraform jobs
    TERRAFORM_JOBS=""

    # Check if 'terraform' directory exists
    if [ -d "../terraform" ]; then
        # Read ignore list from .terraformignore if it exists
        IGNORE_LIST=()
        if [ -f "../.terraformignore" ]; then
            while IFS= read -r line || [ -n "$line" ]; do
                IGNORE_LIST+=("$line")
            done < "../.terraformignore"
        fi

        # Ensure the for loop doesn't match literal pattern if no directories
        shopt -s nullglob

        # Loop over each subdirectory in 'terraform'
        for dir in ../terraform/*/; do
            dir="${dir%/}"                # Remove trailing slash
            SUBDIR_NAME="${dir##*/}"      # Get the subdirectory name

            # Check if SUBDIR_NAME is in IGNORE_LIST
            if [[ " ${IGNORE_LIST[@]} " =~ " ${SUBDIR_NAME} " ]]; then
                echo "Skipping ${SUBDIR_NAME} as it is listed in .terraformignore"
                continue
            fi

            # Create a job for this subdirectory
            TERRAFORM_JOB=$(cat <<EOM
terraform_apply_${SUBDIR_NAME}_job:
  stage: deploy
  script:
    - echo "Applying Terraform configuration in \${SUBDIR_NAME}..."
    - cd terraform/\${SUBDIR_NAME}
    - terraform init
    - terraform apply -auto-approve
  tags: \${RUNNER_TAGS}
EOM
)
            # Append the job to TERRAFORM_JOBS
            TERRAFORM_JOBS+="${TERRAFORM_JOB}"$'\n'
        done

        # Disable nullglob to revert to default behavior
        shopt -u nullglob
    else
        echo "No 'terraform' directory found in the repository."
    fi

    # Export all dynamically declared variables for envsubst
    for key in "${PARAM_KEYS[@]}"; do
        export "$key"
    done

    # Also export any other variables used in the template
    export TEST_JOB
    export TERRAFORM_JOBS

    # Use envsubst to replace variables in the template
    envsubst < template.yml.tmpl > .gitlab-ci-"${ENVIRONMENT}".yml
}

# Example usage
generate_pipeline ENVIRONMENT=dev RUNNER_TAGS='["dev", "alm"]' test=true ADDITIONAL_VAR='some value'



ci/.terraformignore

ci/template.yml.tmpl
stages:
  - build
  - test
  - deploy

variables:
  ENVIRONMENT: "${ENVIRONMENT}"

build_job:
  stage: build
  script:
    - echo "Building the project in ${ENVIRONMENT} environment..."
  tags: ${RUNNER_TAGS}

${TEST_JOB}

deploy_job:
  stage: deploy
  script:
    - echo "Deploying to ${ENVIRONMENT} environment..."
  tags: ${RUNNER_TAGS}

${TERRAFORM_JOBS}



